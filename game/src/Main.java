import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.time.Duration;
import java.time.Instant;

import javax.swing.JFrame;
import javax.swing.JPanel;


/**
 * @brief game object class and starting point of the program
 */
class Main extends JFrame{

  /* avoid declaring variables here, instead add to Lib.java / CorbLib.java / IvanLib.java */
  /*   as this namespace is for things that would be a part of the game runtime instance   */


  /* ##################################################################################### */
  /* ===================================================================================== */
  /* ------------------------->> App UI environment object <<----------------------------- */
  /* ===================================================================================== */
  /* --                                                                                 -- */
  /* ===================================================================================== */
  /* ##################################################################################### */

  /**
   * @brief nested class for our actual app that's then attached to the 'Main'
   *        object to be our working thingy
   */
  class App extends JPanel implements MouseListener{
    // stage instance reference
    Stage stage;

    /* ################################################################# */
    /* ================================================================= */
    /* ----------------------->> constructors <<------------------------ */
    /* ================================================================= */
    /* --                                                             -- */
    /* ================================================================= */
    /* ################################################################# */

    /**
     * @brief construct App instance by dimensions
     */
    public App(int widthIn,int heightIn){
      // set the window sizing
      setPreferredSize(new Dimension(widthIn,heightIn));
      // pat ourself on the back for electing ourself as mouse listener
      this.addMouseListener(this);
      // make new stage by random untracked long
      stage = new Stage(Lib.getUntrackedRandomLong());
    }

    /* ================================================================= */
    /* ----------------------------------------------------------------- */
    /* ================================================================= */
    /* ################################################################# */


    /* ################################################################# */
    /* ================================================================= */
    /* --------------------->> JPanel methods <<------------------------ */
    /* ================================================================= */
    /* --                                                             -- */
    /* ================================================================= */
    /* ################################################################# */

    @Override
    public void paint(Graphics g){
      // handoff to stage for painting, giving them the mouse position
      stage.paint( g, this.getMousePosition() );
    }

    /* ================================================================= */
    /* ----------------------------------------------------------------- */
    /* ================================================================= */
    /* ################################################################# */


    /* ################################################################# */
    /* ================================================================= */
    /* ------------------>> mouse handling methods <<------------------- */
    /* ================================================================= */
    /* --                                                             -- */
    /* --  * hands off to Stage to deal with the MouseEvent           -- */
    /* --                                                             -- */
    /* ================================================================= */
    /* ################################################################# */


    /** @override app mouse clicked handle with MouseEvent input param */
    @Override
    public void mouseClicked(MouseEvent e) { stage.handleMouseEvent(e); }
    /** @override app mouse pressed handle with MouseEvent input param */
    @Override
    public void mousePressed(MouseEvent e) { stage.handleMouseEvent(e); }
    /** @override app mouse released handle with MouseEvent input param */
    @Override
    public void mouseReleased(MouseEvent e) { stage.handleMouseEvent(e); }
    /** @override app mouse entered handle with MouseEvent input param */
    @Override
    public void mouseEntered(MouseEvent e) { stage.handleMouseEvent(e); }
    /** @override app mouse exited handle with MouseEvent input param */
    @Override
    public void mouseExited(MouseEvent e) { stage.handleMouseEvent(e); }

    /* ================================================================= */
    /* ----------------------------------------------------------------- */
    /* ================================================================= */
    /* ################################################################# */

  }

  /* ===================================================================================== */
  /* ------------------------------------------------------------------------------------- */
  /* ===================================================================================== */
  /* ##################################################################################### */


  /* ##################################################################################### */
  /* ===================================================================================== */
  /* -------------------------------->> project entry <<---------------------------------- */
  /* ===================================================================================== */
  /* -- where we get our args                                                           -- */
  /* ===================================================================================== */
  /* ##################################################################################### */

  /**
   * @brief main landing point for the program
   * @param args
   */
  public static void main(String[] args){
    // prepare lib stuffs
    Lib.libmain(args);
    // prepare corblib stuffs
    CorbLib.corblibmain(args);


    // setup and run window
    Main window = new Main(640,420);
    window.run();
  }

  /* ===================================================================================== */
  /* ------------------------------------------------------------------------------------- */
  /* ===================================================================================== */
  /* ##################################################################################### */


  /* ##################################################################################### */
  /* ===================================================================================== */
  /* ----------------------------->> Main window instance <<------------------------------ */
  /* ===================================================================================== */
  /* --                                                                                 -- */
  /* ===================================================================================== */
  /* ##################################################################################### */

  /* ################################################################# */
  /* ================================================================= */
  /* ------------------>> application constructor <<------------------ */
  /* ================================================================= */
  /* --                                                             -- */
  /* --  * used when we make a new java application instance        -- */
  /* --                                                             -- */
  /* ================================================================= */
  /* ################################################################# */

  /**
   * @brief privated constructor the application instance
   */
  private Main(int widthIn, int heightIn){
    // closing program behaviour
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    // create instance of our app
    App app = new App(widthIn,heightIn);
    // put it in the JFrame
    this.setContentPane(app);
    // arrangement of components in the JFrame
    this.pack();
    // make it seeable
    this.setVisible(true);
  }

  /* ================================================================= */
  /* ----------------------------------------------------------------- */
  /* ================================================================= */
  /* ################################################################# */


  /* ################################################################# */
  /* ================================================================= */
  /* ----------------------->> game loop code <<---------------------- */
  /* ================================================================= */
  /* --                                                             -- */
  /* ================================================================= */
  /* ################################################################# */
  
  /**
   * @brief game run loop
   */
  public void run() {
    // run till we fail
    while (true) {
      // peep time
      Instant startTime = Instant.now();
      
      // do a painting
      this.repaint();
      // re-peep time
      Instant endTime = Instant.now();
      // check dif of peeps
      long howLong = Duration.between(startTime, endTime).toMillis();
      // try snooze for the rest of the period before the "next" start should
      //  happen
      try {
        Thread.sleep(20L - howLong);
      } catch (InterruptedException e) {
        System.out.println("thread was interrupted, but who cares?");
      } catch (IllegalArgumentException e) {
        System.out.println("application can't keep up with framerate");
      }
    }
  }

  /* ================================================================= */
  /* ----------------------------------------------------------------- */
  /* ================================================================= */
  /* ################################################################# */

  /* ===================================================================================== */
  /* ------------------------------------------------------------------------------------- */
  /* ===================================================================================== */
  /* ##################################################################################### */
}